{
	"info": {
		"_postman_id": "8c8d4aa6-188c-4759-a532-de5278204f01",
		"name": "TableReservationAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"if(data.token)\r",
											"{\r",
											"    pm.environment.set('adminToken', data.token)\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\":\"1234\",\r\n    \"password\": \"123456\"\r\n}"
								},
								"url": {
									"raw": "{{url}}/user/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"login"
									]
								},
								"description": "This endpoint allows a user to login.\n\n### Request Body:\n* id\n* password\n\n### Expected Responses:\n* status=200\n * \"msg\": \"User loggedin\"\n * \"token\" : ..  \n* status=401\n * 'msg': 'Invalid credentials'\n* status=500\n * 'msg': 'Could not create token'"
							},
							"response": []
						},
						{
							"name": "AddUser",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{adminToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"8585\",\r\n    \"name\": \"Ahmed\",\r\n    \"role\": \"employee\",\r\n    \"password\": \"123456\"\r\n}"
								},
								"url": {
									"raw": "{{url}}/user",
									"host": [
										"{{url}}"
									],
									"path": [
										"user"
									]
								},
								"description": "This endpoint lets you add a user. Only admins are allowed to add users.\n\n### Request Body:\n* id\n* name\n* role (admin | employee)\n* password\n\n### Expected Responses:\n* status=201\n * \"msg\": \"User created\",\n *  \"user\": ..\n* status=401\n * scenario (user unauthorized)\n   * 'msg': 'Unauthorized user'\n * scenario (user not authenticated)\n   * 'msg': 'Unauthenticated.'\n* status=400\n * scenario (user id is used)\n   * 'msg': 'User id is used'\n * scenario (user not authenticated)\n   * 'msg': 'An error occured! User was not created'"
							},
							"response": []
						}
					]
				},
				{
					"name": "Employee",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"\r",
											"if(data.token)\r",
											"{\r",
											"    pm.environment.set('employeeToken', data.token)\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\":\"5678\",\r\n    \"password\": \"123456\"\r\n}"
								},
								"url": {
									"raw": "{{url}}/user/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"login"
									]
								},
								"description": "This endpoint allows a user to login.\n\n### Request Body:\n* id\n* password\n\n### Expected Responses:\n* status=200\n * \"msg\": \"User loggedin\"\n * \"token\" : ..  \n* status=401\n * 'msg': 'Invalid credentials'\n* status=500\n * 'msg': 'Could not create token'"
							},
							"response": []
						},
						{
							"name": "AddUser_Unauthorized",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{employeeToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"2233\",\r\n    \"name\": \"Ali\",\r\n    \"role\": \"employee\",\r\n    \"password\": \"123456\"\r\n}"
								},
								"url": {
									"raw": "{{url}}/user",
									"host": [
										"{{url}}"
									],
									"path": [
										"user"
									]
								},
								"description": "This endpoint lets you add a user. Only admins are allowed to add users.\n\n### Request Body:\n* id\n* name\n* role (admin | employee)\n* password\n\n### Expected Responses:\n* status=201\n * \"msg\": \"User created\",\n *  \"user\": ..\n* status=401\n * scenario (user unauthorized)\n   * 'msg': 'Unauthorized user'\n * scenario (user not authenticated)\n   * 'msg': 'Unauthenticated.'\n* status=400\n * scenario (user id is used)\n   * 'msg': 'User id is used'\n * scenario (user not authenticated)\n   * 'msg': 'An error occured! User was not created'"
							},
							"response": []
						}
					]
				},
				{
					"name": "Unauthenticated",
					"item": [
						{
							"name": "Login_Invalid_Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\":\"8678\",\r\n    \"password\": \"543453\"\r\n}"
								},
								"url": {
									"raw": "{{url}}/user/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"login"
									]
								},
								"description": "This endpoint allows a user to login.\n\n### Request Body:\n* id\n* password\n\n### Expected Responses:\n* status=200\n * \"msg\": \"User loggedin\"\n * \"token\" : ..  \n* status=401\n * 'msg': 'Invalid credentials'\n* status=500\n * 'msg': 'Could not create token'"
							},
							"response": []
						},
						{
							"name": "AddUser_Unauthenticated",
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"2232\",\r\n    \"name\": \"Ali\",\r\n    \"role\": \"admin\",\r\n    \"password\": \"123456\"\r\n}"
								},
								"url": {
									"raw": "{{url}}/user",
									"host": [
										"{{url}}"
									],
									"path": [
										"user"
									]
								},
								"description": "This endpoint lets you add a user. Only admins are allowed to add users.\n\n### Request Body:\n* id\n* name\n* role (admin | employee)\n* password\n\n### Expected Responses:\n* status=201\n * \"msg\": \"User created\",\n *  \"user\": ..\n* status=401\n * scenario (user unauthorized)\n   * 'msg': 'Unauthorized user'\n * scenario (user not authenticated)\n   * 'msg': 'Unauthenticated.'\n* status=400\n * scenario (user id is used)\n   * 'msg': 'User id is used'\n * scenario (user not authenticated)\n   * 'msg': 'An error occured! User was not created'"
							},
							"response": []
						}
					]
				}
			],
			"description": "API's related to logging in and adding users"
		},
		{
			"name": "RestaurantTables",
			"item": [
				{
					"name": "AddRestaurantTable_AsAdmin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"3\",\r\n    \"seats\": 4\r\n}"
						},
						"url": {
							"raw": "{{url}}/table",
							"host": [
								"{{url}}"
							],
							"path": [
								"table"
							]
						},
						"description": "This endpoint store a newly created restaurant table. Only \"admin\" users are allowed to add new tables.\n\n### Request Body:\n* id (table id)\n* seats\n\n### Expected Responses:\n* status=201\n * \"msg\": \"Table created\",\n * \"table\": ..\n* status=401\n * scenario (user unauthorized)\n   * 'msg': 'Unauthorized user'\n * scenario (user not authenticated)\n   * 'msg': 'Unauthenticated.'\n* status=400\n * scenario (table id is used)\n   * 'msg': 'Table id is used'\n * scenario (An error occured while storing)\n   * 'msg': 'An error occured!'"
					},
					"response": []
				},
				{
					"name": "GetTables_AsAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/table",
							"host": [
								"{{url}}"
							],
							"path": [
								"table"
							]
						},
						"description": "This endpoint displays a listing of all restaurant tables. Only \"admin\" users are allowed to list tables.\n\n### Request Body:\n* -\n\n### Expected Responses:\n* status=200\n * \"msg\": \"List of tables\",\n * \"tables\": ..\n* status=401\n * scenario (user unauthorized)\n   * 'msg': 'Unauthorized user'\n * scenario (user not authenticated)\n   * 'msg': 'Unauthenticated.'\n* status=404\n * 'msg': 'No tables were found'"
					},
					"response": []
				},
				{
					"name": "DeleteTable_AsAdmin",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/table/3",
							"host": [
								"{{url}}"
							],
							"path": [
								"table",
								"3"
							]
						},
						"description": "This endpoint removes the specified restaurant table using a given table id. Only \"admin\" users are allowed to delete tables.\n\n### URL Parameters:\n* id (table id)\n### Request Body:\n* -\n\n### Expected Responses:\n* status=200\n * \"msg\": \"Table deleted\"\n* status=401\n * scenario (user unauthorized)\n   * 'msg': 'Unauthorized user'\n * scenario (user not authenticated)\n   * 'msg': 'Unauthenticated.'\n* status=400\n * scenario (deleting a table that still has reservations)\n   * 'msg': 'Table cannot be deleted due to availability of reservations'\n * scenario (table id was not found)\n   * 'msg': 'Table was not found'\n * scenario (DB error)\n   * 'msg': 'Table deletion failed'"
					},
					"response": []
				}
			],
			"description": "APIs related to creating restaurant tables, retrieving them, and deleting them"
		},
		{
			"name": "Reservations",
			"item": [
				{
					"name": "CreateReservation",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"table_id\": \"1\",\r\n    \"starting_time\": \"16:25\",\r\n    \"ending_time\": \"16:55\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/reservation",
							"host": [
								"{{url}}"
							],
							"path": [
								"reservation"
							]
						},
						"description": "This endpoint adds a new reservation. Only authenticated users are allowed to use this endpoint.\n\n### Request Body:\n* table_id\n* starting_time (example: 12:00)\n* ending_time (example: 12:20)\n\n### Expected Responses:\n* status=201\n * \"msg\": \"Reservation created\"\n * \"reservation\": ..\n* status=401\n * scenario (user not authenticated)\n   * 'msg': 'Unauthenticated.'\n* status=400\n * scenario (starting_time given to be in the past)\n   * 'msg': 'starting_time has to be in the present or future'\n * scenario (table already reserved at time)\n   * 'msg': 'Reservation cannot be created. Table is already reserved at the provided time.'\n * scenario (DB error)\n   * 'msg': 'An error occured'"
					},
					"response": []
				},
				{
					"name": "GetReservationsForToday",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"sort\" : \"ASC\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/reservation",
							"host": [
								"{{url}}"
							],
							"path": [
								"reservation"
							]
						},
						"description": "This endpoint displays a paginated listing of all reservations for today. Only authenticated users are allowed to use this endpoint.\n\n### Request Body (optional):\n* sort (value = ASC)\n\n### Expected Responses:\n* status=200\n * \"msg\": \"Reservations of Today\"\n * \"reservations\": ..\n* status=401\n * scenario (user not authenticated)\n   * 'msg': 'Unauthenticated.'\n* status=404\n * 'msg': 'No reservations were found'"
					},
					"response": []
				},
				{
					"name": "DeleteReservation",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/reservation/5",
							"host": [
								"{{url}}"
							],
							"path": [
								"reservation",
								"5"
							]
						},
						"description": "This endpoint removes the specified reservation using a given id. Only authenticated users are allowed to use this endpoint.\n\n### URL Parameters:\n* id (reservation id)\n### Request Body:\n* -\n\n### Expected Responses:\n* status=200\n * \"msg\": \"Reservation canceled\"\n* status=401\n * scenario (user not authenticated)\n   * 'msg': 'Unauthenticated.'\n* status=400\n * scenario (cancelling old reservations)\n   * 'msg': 'Old reservation cannot be cancelled'\n * scenario ('Reservation cancellation failed')\n   * 'msg': 'Reservation cancellation failed'\n* status=404\n * 'msg': 'Reservation not found!'"
					},
					"response": []
				},
				{
					"name": "GetAllReservations",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tables_ids\": [\"1\",\"2\"],\r\n    \"starting_date\": \"2021-06-07 12:00\",\r\n    \"ending_date\": \"2021-06-07 23:50\"\r\n}"
						},
						"url": {
							"raw": "{{url}}/reservation/all",
							"host": [
								"{{url}}"
							],
							"path": [
								"reservation",
								"all"
							]
						},
						"description": "This endpoint displays a paginated listing of all reservations. Only \"admin\" users are allowed to use this endpoint.\n\n### Request Body (optional):\n* tables_ids (list of ids, example: ['1', '2'])\n* starting_date (example: 2021-06-06 12:00)\n* ending_date (example: 2021-06-06 12:20)\n\n### Expected Responses:\n* status=200\n * \"msg\": \"All found reservations\"\n * \"reservations\": ..\n* status=401\n * scenario (user not authenticated)\n   * 'msg': 'Unauthenticated.'\n * scenario (user not authorized)\n   * 'msg': 'Unauthorized user'\n* status=404\n * 'msg': 'No reservations were found'"
					},
					"response": []
				},
				{
					"name": "CheckAvailableTimeSlots",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {},
						"followRedirects": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{adminToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/reservation/available/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"reservation",
								"available",
								"1"
							]
						},
						"description": "This endpoint checks available time slots for today using a given number of seats required. Only authenticated users are allowed to use this endpoint.\n\n\n### URL Parameters:\n* seats\n\n### Expected Responses:\n* status=200\n * \"msg\": \"Available time slots today\"\n * \"tables\": ..\n* status=401\n * scenario (user not authenticated)\n   * 'msg': 'Unauthenticated.'\n* status=400\n * scenario (no tables are defined in the restaurant)\n   * 'msg': 'no tables are defined in the restaurant'\n * scenario (the number of seats provided is invalid)\n   * 'msg': 'the number of seats provided is invalid'\n* status=404\n * 'msg': 'No time slots are available today'"
					},
					"response": []
				}
			]
		}
	]
}