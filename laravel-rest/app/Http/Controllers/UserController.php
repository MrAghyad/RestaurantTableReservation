<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\User;
use Exception;
use Tymon\JWTAuth\Facades\JWTAuth;

/**
 * @group User Controller
 *
 * Contains APIs for adding users and logging in
 */
class UserController extends Controller
{
    /**
	 * Defines authentication middleware that is applied to store endpoint only
	 */
    public function __construct()
    {
        $this->middleware('auth:api', ['only' => ['store']]);
    }

    /**
     * Add a user
     *
     * This endpoint lets you add a user. Only admins are allowed to add users.
     * @authenticated
     *
     * @bodyParam id string required The id of the user is a string of 4 digits. Example: 1234
     * @bodyParam name string required The user name of alpha characters. Example: Ahmed
     * @bodyParam role string required The role of the user can be either admin, or employee. Example: admin
     * @bodyParam password string required The user password consists of at least 6 characters. Example: 123456
     *
     * @response status=201 scenario=success {
     *      "msg": "User created",
     *      "user": {
     *          "id": 2232,
     *          "name": "Ali",
     *          "role": "employee",
     *          "updated_at": "2021-06-03T17:17:15.000000Z",
     *          "created_at": "2021-06-03T17:17:15.000000Z"
     *      }
     * }
     *
     * @response status=401 scenario="user unauthorized" {
     *  'msg': 'Unauthorized user'
     * }
     *
     * @response status=401 scenario="user not authenticated" {
     *  'msg': 'Not authenticated'
     * }
     *
     * @response status=400  scenario="user id is used"{
     *  'msg': 'User id is used'
     * }
     *
     * @response status=400  {
     *  'msg': 'An error occured! User was not created'
     * }
     */
    public function store(Request $request)
    {
        //check authenticated user is admin. Return negative response 401 otherwise.
        $checkAuthenticatedAdmin = $this->checkAuthenticatedAdmin();
        if($checkAuthenticatedAdmin != null)
        {
            return $checkAuthenticatedAdmin;
        }

        //validate request input using a set of rules. if input is not valid a default message generated by laravel is returned as response
        $this->validate($request, [
            'id' => 'required|digits:4',            //id is required, with 4 digits size
            'name' => 'required|alpha',             //name is required, only alpha characters
            'role' => 'required|in:admin,employee', //role is required, either admin or employee
            'password' => 'required|min:6',         //password is required, at least 6 characters long
        ]);

        //get request input
        $user_id = $request->input('id');
        $user_name = $request->input('name');
        $user_role = $request->input('role');
        $user_password = $request->input('password');

        //check if user id is already used
        $user = User::find($user_id);
        if($user != null)
        {
            //in case user id was used, return error message
            $response = [
                'msg' => 'User id is used'
            ];
            return response()->json($response, 400);
        }
        //create user object from request input
        $user = new User([
            'id' => $user_id,
            'name' => $user_name,
            'role' => $user_role,
            'password' => bcrypt($user_password)
        ]);

        //try to save user
        try{
            if($user->save())
            {
                //if user was saved, generate resposne, and return 201
                $response = [
                    'msg' => 'User created',
                    'user' => $user
                ];

                return response()->json($response, 201);
            }
        }catch(Exception $e)
        {
            //in case of errors that occured while saving user, return error message
            $response = [
                'msg' => 'An error occured! User was not created'
            ];

            return response()->json($response, 400);
        }

        //in case user was not saved, return error message
        $response = [
            'msg' => 'An error occured! User was not created'
        ];
        return response()->json($response, 400);
    }


    /**
     * Login a user
     *
     * This endpoint allows a user to login.
     *
     * @bodyParam id string required
     * @bodyParam password string required
     *
     * @response status=200 scenario=success {
     *      "msg": "User loggedin",
     *      "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC92MVwvdXNlclwvbG9naW4iLCJpYXQiOjE2MjI3NDA2MTMsImV4cCI6MTYyMjc0NDIxMywibmJmIjoxNjIyNzQwNjEzLCJqdGkiOiJ5aWttb0NlMmt0MmQ0TW9CIiwic3ViIjoxMjM1LCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.1_njtfBJGRgTx08awCYxtS6fLlIZPC8uABsB5n97lzw"
     * }
     *
     * @response status=401 scenario="invalid credentials" {
     *  'msg': 'Invalid credentials'
     * }
     *
     *
     * @response status=500  {
     *  'msg': 'Could not create token'
     * }
     */
    public function login(Request $request)
    {
        $this->validate($request, [
            'id' => 'required',
            'password' => 'required',
        ]);

        $user_id = $request->input('id');
        $user_password = $request->input('password');


        $credentials = $request->only('id', 'password');

        try{
            if(! $token = JWTAuth::attempt($credentials))
            {
                return response()->json(['msg'=>'Invalid credentials'], 401);
            }
        }
        catch(Exception $e)
        {
            return response()->json(['msg'=>'Could not create token'], 500);
        }

        $response = [
            'msg' => 'User loggedin',
            'token' => $token
        ];

        return response()->json($response, 200);
    }
}
